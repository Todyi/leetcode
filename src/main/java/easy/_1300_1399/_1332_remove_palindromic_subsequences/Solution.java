package easy._1300_1399._1332_remove_palindromic_subsequences;

//Given a string s consisting only of letters 'a' and 'b'.
// In a single step you can remove one palindromic subsequence from s.
//
// Return the minimum number of steps to make the given string empty.
//
// A string is a subsequence of a given string,
// if it is generated by deleting some characters of a given string without changing its order.
//
// A string is called palindrome if is one that reads the same backward as well
//as forward.
//
//
// Example 1:
//
//
//Input: s = "ababa"
//Output: 1
//Explanation: String is already palindrome
//
//
// Example 2:
//
//
//Input: s = "abb"
//Output: 2
//Explanation: "abb" -> "bb" -> "".
//Remove palindromic subsequence "a" then "bb".
//
//
// Example 3:
//
//
//Input: s = "baabb"
//Output: 2
//Explanation: "baabb" -> "b" -> "".
//Remove palindromic subsequence "baab" then "b".
//
//
// Example 4:
//
//
//Input: s = ""
//Output: 0
//
//
//
// Constraints:
//
//
// 0 <= s.length <= 1000
// s only consists of letters 'a' and 'b'
// Related Topics String
// 👍 237 👎 480


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {

  //  解答成功:
  //  执行耗时:0 ms,击败了100.00% 的Java用户
  //  内存消耗:37 MB,击败了89.60% 的Java用户
  public int removePalindromeSub(String s) {
    if (s == null || s.length() == 0) {
      return 0;
    }
    if (isPalindrome(s.toCharArray(), s.length())) {
      return 1;
    }
    return 2;
  }

  public boolean isPalindrome(char[] arr, int len) {
    for (int i = 0; i < len / 2; i++) {
      if (arr[i] != arr[len - 1 - i]) {
        return false;
      }
    }
    return true;
  }

}
//leetcode submit region end(Prohibit modification and deletion)

